{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialFilters","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoList","useState","filteredTodos","setFilteredTodos","dispatch","useEffect","filterByQuery","title","toLowerCase","includes","ALL","ACTIVE","completed","COMPLETED","length","className","map","classNames","id","onClick","handleTodoSelect","TodoFilter","handleQuerySet","filterAction","defaultValue","onChange","e","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","currentUser","setCurrentUser","isLoading","setIsLoading","userId","user","finally","currentTodoAction","href","email","name","App","todosAction","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72a78117.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type AddQueryAction = {\n  type: 'filter/ADD_QUERY',\n  payload: string;\n};\n\ntype AddStatusAction = {\n  type: 'filter/ADD_STATUS',\n  payload: string;\n};\n\ntype Action = AddQueryAction | AddStatusAction;\n\nconst addQuery = (query: string): AddQueryAction => ({\n  type: 'filter/ADD_QUERY',\n  payload: query,\n});\n\nconst addStatus = (status: string): AddStatusAction => ({\n  type: 'filter/ADD_STATUS',\n  payload: status,\n});\n\nexport const actions = { addQuery, addStatus };\n\nconst initialFilters = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state = initialFilters, action: Action) => {\n  switch (action.type) {\n    case 'filter/ADD_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/ADD_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddTodosAction = {\n  type: 'todos/ADD',\n  payload: Todo[],\n};\n\nconst addTodos = (todos: Todo[]): AddTodosAction => ({\n  type: 'todos/ADD',\n  payload: todos,\n});\n\nexport const actions = { addTodos };\n\nconst todosReducer = (state: Todo[] = [], action: AddTodosAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return [...action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\n\nexport const TodoList: React.FC = () => {\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>();\n\n  const dispatch = useDispatch();\n  const filter = useAppSelector(state => state.filter);\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const filterTodos = () => {\n    return todos.filter((todo) => {\n      const filterByQuery = todo.title\n        .toLowerCase()\n        .includes(filter.query.toLowerCase());\n\n      switch (filter.status) {\n        case Status.ALL:\n          return filterByQuery;\n\n        case Status.ACTIVE:\n          return !todo.completed && filterByQuery;\n\n        case Status.COMPLETED:\n          return todo.completed && filterByQuery;\n\n        default:\n          return filterByQuery;\n      }\n    });\n  };\n\n  const handleTodoSelect = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  useEffect(() => {\n    setFilteredTodos(filterTodos());\n  }, [filter]);\n\n  return (\n    <>\n      {filteredTodos && filteredTodos.length ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map((todo) => (\n              <tr\n                data-cy=\"todo\"\n                className={classNames({\n                  'has-background-info-light': currentTodo?.id === todo.id,\n                })}\n                key={todo.id}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames({\n                      'has-text-success': todo.completed,\n                      'has-text-danger': !todo.completed,\n                    })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleTodoSelect(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={classNames('far', {\n                          'fa-eye': todo.id !== currentTodo?.id,\n                          'fa-eye-slash': todo.id === currentTodo?.id,\n                        })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterAction } from '../../features/filter';\n\nexport const TodoFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useAppSelector((state) => state.filter);\n\n  const handleStatusChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterAction.addStatus(e.target.value));\n  };\n\n  const handleQuerySet = (query = '') => {\n    dispatch(filterAction.addQuery(query));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            defaultValue={filter.status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter.query}\n          onChange={(e) => handleQuerySet(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filter.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleQuerySet()}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoAction } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (currentTodo) {\n      setIsLoading(true);\n      getUser(currentTodo.userId)\n        .then((user) => setCurrentUser(user))\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  const handleRemoveTodo = () => {\n    dispatch(currentTodoAction.removeTodo());\n  };\n\n  return (\n    <>\n      {currentTodo && (\n        <div className=\"modal is-active\" data-cy=\"modal\">\n          <div className=\"modal-background\" />\n\n          {isLoading ? (\n            <Loader />\n          ) : currentUser && (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  {`Todo #${currentTodo.id}`}\n                </div>\n\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={() => handleRemoveTodo()}\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {currentTodo.title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {currentTodo.completed ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  ) : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n\n                  {' by '}\n\n                  <a href={`mailto:${currentUser.email}`}>{currentUser.name}</a>\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions as todosAction } from './features/todos';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((todos) => dispatch(todosAction.addTodos(todos)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}